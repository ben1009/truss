// Code generated by go-bindata.
// sources:
// NAMEservice/client/grpc/client.gotemplate
// NAMEservice/client/http/client.gotemplate
// NAMEservice/cmd/server/main.gotemplate
// NAMEservice/svc/endpoints.gotemplate
// NAMEservice/svc/handlers/handlers.gotemplate
// NAMEservice/svc/handlers/hooks.gotemplate
// NAMEservice/svc/serve.gotemplate
// NAMEservice/svc/transport_grpc.gotemplate
// NAMEservice/svc/transport_http.gotemplate
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4f\x6f\xdb\x3a\x12\x3f\x8b\x9f\x62\xd6\x08\x16\x52\xa0\x50\xf7\x2c\x72\xa9\x93\x2d\xba\xd8\xa6\x41\x1a\xf4\x1d\x8a\xa2\xa0\xa9\x91\x4c\x58\x26\x55\x92\x76\x62\x08\xfa\xee\x0f\x43\x4a\x8e\x9c\x38\x6e\x2e\x0f\xef\xf2\x0a\x34\x11\x39\x3f\xce\xbf\xdf\x70\x38\x29\x0a\x98\x9b\x12\xa1\x46\x8d\x56\x78\x2c\x61\xb1\x03\x6f\x37\xce\x71\xb8\xfe\x02\xb7\x5f\x1e\xe0\xe6\xfa\xd3\x03\x67\x45\x01\xf7\x68\x37\x5a\x2b\x5d\x47\x00\x3c\xaa\xa6\x01\xb3\x45\xfb\x68\x95\x47\xf0\x4b\xe5\xa0\x52\x0d\x06\xf0\x37\xb4\x4e\x19\x7d\x09\x5d\xc7\x87\xef\xbe\x9f\x08\xe0\x5a\x78\x9c\x4a\x69\xdd\xf7\x8c\x20\x77\x42\xae\x44\x8d\x50\xdb\x56\x42\x6b\xcd\x56\x95\xe8\x40\x40\x7d\x7f\x37\x07\xd9\x28\xd4\x1e\x2a\x63\xc1\x2f\x91\x14\x7c\x45\xbb\x55\x12\xf9\xad\x58\x63\xdf\x83\x1b\x96\xac\x9d\xa8\x61\x4c\xad\x5b\x63\x3d\xa4\x2c\x99\x49\xa3\x3d\x3e\xf9\x19\x4b\x66\xb5\x31\x75\x83\xbc\x36\x8d\xd0\x35\x37\xb6\x2e\x08\xfd\xb6\xa4\x58\xa3\x17\xa5\xf0\x22\x40\x94\x5f\x6e\x16\x5c\x9a\x75\xd1\xae\xea\x02\xad\x35\xd6\xcd\xd8\xa1\xa4\x36\x17\x2b\xe5\x0b\xfa\x8f\xba\x6c\x8d\xd2\x64\x98\x74\x79\x2b\xb4\x0b\x4e\xbd\x81\xdf\x03\x9e\x9d\x9a\xe2\x6a\x53\xb4\xd6\x78\xb3\xd8\x54\x85\xdf\xb5\x18\x4c\x17\x05\x3c\x10\x11\x43\x52\x58\x32\xeb\x3a\xfe\x29\xc4\x7e\x27\xfc\x12\x2e\xfa\x1e\x0a\xb7\x25\x6d\xed\x02\x48\x78\xf7\xe1\x50\x3c\x63\x59\x60\xe1\x16\x1f\xc1\xa2\xdf\x58\xed\x40\xe8\x31\xad\xb0\x10\x72\x15\xcb\xe4\x90\x10\x69\xb4\x46\xe9\x95\xd1\x1c\x3e\x79\x50\x8e\xe8\x21\x3d\x16\x5d\x6b\xb4\x53\x0b\xd5\x28\xbf\x03\x53\x05\xde\xa4\x68\x1a\xb4\xe0\x0d\x94\x4a\x34\x39\x08\x5d\x42\x23\x3c\x5a\x90\x8d\x71\x98\x47\xd0\xb3\x4e\x56\x6d\xb4\x24\x9f\x52\xda\x84\x73\xca\x08\x9f\x07\xd3\x73\xa3\x75\x0e\xa6\x25\x9c\x03\xce\x87\xed\x2f\x61\x23\x83\xb4\x5d\xf0\x57\x55\x42\x2b\xb4\x39\x04\xce\x32\xe8\x58\xb2\x15\x16\xa4\x1c\xa2\x99\x1b\x5d\xa9\x9a\xb1\x84\xca\xec\x67\x0e\x15\x5c\x5e\x81\x15\xba\xc6\xbd\x9d\x8e\x25\x09\x5a\x4b\x82\x2a\xfd\xb7\x94\x19\x4b\x12\x55\x91\x42\xf8\xd7\x15\x68\xd5\x04\x44\x12\x33\x48\xeb\xc1\x98\xe3\x7f\x58\xd1\xa6\x68\x6d\x0e\x33\x29\xb4\x36\x1e\x44\xdb\x36\xbb\x41\xf3\x8c\x14\xf5\x2c\xe9\x19\x4b\xe4\x24\x10\x47\x96\xbe\xff\x38\x28\x9c\x83\x48\xc9\xdc\x31\xe9\x07\xac\x8c\xc5\x94\x9c\x19\x0a\xff\x9b\x68\x36\xe8\x1e\xcc\xc7\xfb\xbb\xf9\xe7\xa1\x9e\x53\x29\xf9\x12\x45\x89\xd6\x65\x59\x4e\xe6\x93\xae\xbb\x80\x47\xe5\x97\x70\xe6\x91\x8c\xf3\xbe\x67\xc9\x64\xb7\x5d\xd5\x94\x4c\x12\x9d\x79\xe4\xc3\xad\x8d\xf9\x25\x6b\x84\x8c\x39\x3b\x53\x23\x68\x64\xe1\x33\xfa\xa5\x29\x5d\xdf\x33\x00\x80\x24\xa1\x9f\x5d\xa7\x2a\xd0\x08\xfc\x3e\x56\x0c\x3e\xec\xda\xc8\x17\xcc\x6e\xd6\xad\xdf\xcd\x20\x2a\x0e\x5c\x75\xdd\x83\xf9\xbf\x79\x44\x0b\x67\x6a\x20\xf5\x66\xb8\x5f\x30\x5e\x34\x3e\xee\x84\x53\x81\x0f\x72\xeb\xed\x83\x57\x70\x98\xc1\x5b\x7c\x8c\x49\x4c\xe3\x59\xca\xa0\xce\x87\xef\x59\xd7\x8d\x39\xe8\x7b\xde\x75\xd3\xf8\xe2\xe6\x6c\x0a\x55\x2f\x37\x6f\xb4\x34\x25\x12\x09\x13\xe9\x3d\xfe\xda\xa0\xf3\x23\xe6\x1a\x8f\x62\x62\x7e\x46\x50\x28\xf0\x8f\x26\x64\xea\x4c\xbd\x4e\x5f\xdf\x77\xfd\x88\x3d\x28\x29\xce\xf9\xb0\x9f\xed\x53\x95\x66\x61\x27\x26\xba\xeb\xb0\x71\x38\xb0\x34\xfd\xf7\x0f\x03\x07\x0c\x84\xf6\xfb\x17\x92\xa0\xcb\xf1\x4a\x8d\x9f\xfb\xaf\xf1\x83\x8d\xad\xc6\x6d\xe5\x5e\x8f\xeb\x08\x30\xbd\x84\x2f\x6f\x20\x75\xfc\xa0\xee\x15\x15\x97\xf1\x4e\xbe\x49\x55\xfe\x6c\x3b\xe9\x73\xea\x70\x2c\x3e\xdf\x94\x2b\x88\xa4\x41\xcc\x1e\x3b\xed\x43\x1c\x0c\x4e\x26\x9a\xde\x13\x01\x87\x0f\x22\x8f\x27\x46\xc8\x7f\xe9\x81\xf0\x4b\x11\x9e\xa2\x2d\x5a\xef\x40\x90\xde\xf0\x48\x1d\x89\x03\x2c\x52\xd7\xf5\x06\x04\x6c\x1c\xda\x8b\xd2\xac\x85\xd2\x6f\x40\xa3\x0d\x0e\x77\x56\xad\x85\x55\xcd\x8e\xce\x54\x9b\x06\x94\x06\x31\xbc\x1a\x9c\xbd\xbf\x8d\x11\x32\x3c\x69\x27\xc3\x4e\x7f\xc2\xd0\xb3\xf9\x3c\xfe\xce\xc3\xfd\xb8\x0f\xae\x2b\xed\xd1\x56\x42\x62\xd7\x67\x90\x4e\x56\x93\x77\x6d\xbc\xb0\x31\xd8\xcb\xab\xe7\xe3\x3c\x3d\xff\x7d\xe3\xc8\x26\x0a\x42\x75\x05\x3d\x91\x6d\xda\xed\x87\x90\x27\x6d\xe2\x6f\x8f\xea\x5d\x97\xf1\x5d\x81\xed\x0b\x7c\x7f\xc9\x5e\x94\x77\x6c\x20\xef\x2a\xef\x53\xbd\xe6\x68\x75\xc7\x03\x03\xe2\xad\xe2\xfe\x7d\xe1\x46\x03\xa1\xca\x4f\xdc\x84\x80\xfa\x5d\x75\x07\x66\x4f\xc5\x71\x8c\xd8\xd1\x83\xf7\xd0\x9a\x58\xfc\x15\x26\xad\xc1\x9f\x23\x15\x1a\x04\x07\x3c\x26\x7b\x02\x7f\x8d\x5d\x68\x4f\x17\xa3\x5a\x38\x98\xe9\xc0\x79\xbb\x91\x9e\x8c\x0d\xe3\x0e\x7c\xff\xe1\xbc\x55\xba\x1e\xda\xd7\x74\xa6\x8a\xc4\x50\xdc\x61\x15\x08\x58\x9b\x52\x55\x0a\x5d\x9c\x50\xf7\xc3\x2f\xcd\x8b\xc1\xda\xc1\x79\x3a\x9a\x9e\x4f\x1d\xc8\x62\xb8\x2c\x66\x73\xee\x9f\xc6\x69\xec\x2b\xea\x32\x5d\xe1\x2e\x8c\xb0\xd1\xa3\xec\x50\x59\xb7\x8f\x35\xa8\x35\x70\x4c\x71\x18\x3b\xcd\x38\xcb\xc1\x15\x90\x4a\x36\x1d\x44\x69\xb8\xeb\x07\xfb\xa7\x26\xc2\xe0\xcb\x98\x9c\x0c\x8e\xcd\x96\xd3\xea\x7c\xe1\x9d\xf4\x4f\xaf\x8b\x61\x5d\xc2\xf9\xf8\x17\x14\xff\x7c\x9d\xbd\x44\x04\xe7\x69\xb6\x68\x85\x9a\x32\x93\x8c\x83\xf8\xea\x79\x10\x0f\xee\x85\x89\x42\x55\xb0\xcd\xc1\x04\x99\xf4\x4f\x3c\x44\x93\xae\x32\x9e\x0e\xbe\xff\x87\x84\x71\xf8\x88\x8a\xaf\x68\xe4\xa6\x7c\x87\x65\x0e\xab\x1c\xb6\xe1\xc9\xed\xc3\xf0\x1d\x47\xf9\x08\x9d\x0e\xf3\xe7\xeb\x12\xae\x60\x1f\xc0\xff\x8c\xd2\xe9\xf9\xba\xcc\x9f\xb7\xee\xe8\x4c\xd4\xca\x39\xcf\xb2\x51\xdd\x90\x19\xe9\x9f\x62\xf6\xff\x0c\x00\x00\xff\xff\x1e\xb7\x82\xca\x78\x0f\x00\x00")

func clientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_clientGrpcClientGotemplate,
		"client/grpc/client.gotemplate",
	)
}

func clientGrpcClientGotemplate() (*asset, error) {
	bytes, err := clientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/grpc/client.gotemplate", size: 3960, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func clientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_clientHttpClientGotemplate,
		"client/http/client.gotemplate",
	)
}

func clientHttpClientGotemplate() (*asset, error) {
	bytes, err := clientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/http/client.gotemplate", size: 105, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdServerMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x6e\xb3\x30\x10\x84\xcf\xec\x53\x8c\x38\xc1\xe1\xc7\xf7\xff\x1a\x7a\xc8\xa5\x89\xda\xb4\x77\x07\x06\xb0\x4a\x0c\xb2\x0d\x51\x84\xfc\xee\x95\x69\x55\xe5\xe4\xb1\xe6\xdb\x9d\xdd\x55\x0a\x87\xa9\x25\x7a\x5a\x3a\x1d\xd8\xe2\xfa\x40\x70\x8b\xf7\x15\xea\x13\x5e\x4f\x17\xbc\xd4\xc7\x4b\x25\x4a\xe1\x8d\x6e\xb1\xd6\xd8\xfe\x07\xc0\xdd\x8c\x23\xa6\x95\xee\xee\x4c\x20\xc2\x60\x3c\x3a\x33\x72\x87\x3f\xe9\xbc\x99\xec\x7f\x6c\x5b\xf5\xab\x63\x7c\x32\x50\xeb\xc0\x67\x37\xfd\x63\x14\x99\x75\xf3\xa5\x7b\xe2\xa6\x8d\x15\x31\xb7\x79\x72\x01\x85\x64\x79\x37\xea\x3e\x17\xc9\x94\xc2\x25\x45\xbd\xd3\xad\xa6\xa1\x64\xf9\xb6\x55\xc7\x9d\x3b\xeb\x30\xe0\x5f\x8c\x50\x7e\x6d\x72\x29\x45\xba\xc5\x36\x7b\xab\xa2\xc4\xb6\xd7\x7e\xcc\xad\x0e\x84\x6e\x5b\x47\xef\xe9\x61\x3a\x84\x81\x0f\x0c\x7a\x25\xae\xa4\xfd\xdb\x29\xd0\xa6\x73\xa4\x60\x2f\x59\x7a\xaa\xb3\x76\x9e\x45\x29\x92\xf9\xb5\xa9\xd2\x08\x2c\x92\xaa\xd9\xe9\x65\x0c\x87\xc9\x76\xa6\x2f\x25\xca\x77\x00\x00\x00\xff\xff\x22\x5d\x53\x8d\x59\x01\x00\x00")

func cmdServerMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdServerMainGotemplate,
		"cmd/server/main.gotemplate",
	)
}

func cmdServerMainGotemplate() (*asset, error) {
	bytes, err := cmdServerMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/server/main.gotemplate", size: 345, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4b\x6f\xe4\xb8\x11\x3e\x4b\xbf\xa2\x56\x70\xe0\xee\x85\xcc\xbe\x7b\xe1\x43\x32\xe3\x24\x06\x32\x9e\xc1\xd8\x49\x0e\x8b\xc5\x82\x2d\x95\xba\x09\x53\x24\x87\xa4\xfa\x11\x41\xff\x3d\x28\x52\x52\xab\xdd\xf2\x3c\x02\xe4\x12\xe4\x60\xc8\xcd\xc7\xc7\xaf\xbe\x7a\xb0\xb8\x5a\xc1\x3b\x5d\x22\x6c\x50\xa1\xe5\x1e\x4b\x58\x1f\xc1\xdb\xc6\x39\x06\xef\x3f\xc2\xe3\xc7\x67\xb8\x7f\xff\xf0\xcc\xd2\xd5\x0a\x3e\xa3\x6d\x94\x12\x6a\x13\x17\xc0\x5e\x48\x09\x7a\x87\x76\x6f\x85\x47\xf0\x5b\xe1\xa0\x12\x12\xc3\xe2\x7f\xa0\x75\x42\xab\x5b\x68\x5b\xd6\xff\xdf\x75\x93\x09\x78\xcf\x3d\x4e\x67\xe9\x77\xd7\xa5\xa9\xe1\xc5\x0b\xdf\x20\xb8\x5d\x91\xd2\xfa\xe7\x01\x16\x0a\xad\x3c\x17\xca\x41\x8d\x7e\xab\x4b\x07\x5e\x43\xcd\x5f\x10\x84\x2a\xc5\x4e\x94\x0d\x97\x80\xaa\x34\x5a\x28\xef\xa0\xb2\xba\x06\x87\x76\x27\x0a\x74\x39\x21\x59\xfc\xd2\xa0\xf3\xc0\x55\x09\x16\x9d\xd1\xca\x21\xf8\xa3\xc1\x80\x44\x4b\xc9\x08\xed\xf0\x84\x92\x03\x77\xb0\x47\x29\xe9\x8b\xaa\xd0\x25\x5a\x47\x00\x84\x57\x62\xff\xbb\xd2\xb6\xdf\x18\xd0\xf2\x30\xc0\x49\x9c\x0a\x74\x63\xc1\x35\xc6\x68\x4b\xe2\x7a\xcb\x95\xa3\xff\xe9\x38\xc1\xa5\xf8\x17\xf7\x42\x2b\x42\xab\xb4\xad\xb9\x77\x2c\x4d\x45\x1d\x56\x2c\xd2\x24\xab\x6a\x9f\xa5\x49\x46\x96\xe3\xc1\x67\x69\x9a\x64\x1b\xe1\xb7\xcd\x9a\x15\xba\x5e\x6d\xf4\xcd\x8b\xf0\x2b\xfa\x1b\x18\x67\xaf\x57\x6c\xf4\xca\x58\xed\xf5\xba\xa9\x56\x81\x1d\x81\x98\x35\x64\x6d\xcb\x3e\xfd\xe9\x21\x1c\xf5\x89\xfb\x2d\xdc\x74\x5d\x96\x2e\x83\xe4\xf7\xa3\x88\x85\x96\x12\x0b\xef\x06\x6b\xfc\x76\x22\x0e\xf8\x2d\xf7\x50\xe8\xda\x90\xe9\x5c\x01\x2f\xcb\x41\x71\x06\x0f\xfe\xda\x11\x58\x8d\x5c\x79\x12\x78\x8d\xd0\x38\x2c\x49\x49\x0e\x5b\x94\x06\x2d\x38\x6f\x9b\xc2\xe7\x34\xdd\x1f\x35\x7f\x92\x50\x5e\x03\x27\x38\x27\xd4\x46\x22\x18\x6e\x79\x8d\x1e\x2d\x05\x1b\x8d\x3f\x28\xe0\xd1\x87\x36\x07\xe1\xaf\x1d\x1d\x56\x35\x32\xf8\xa2\x6a\x54\x41\x3a\xf7\x94\x15\x92\x2b\x34\x68\x13\x62\x1e\x34\xed\x35\x68\x6f\x86\x03\x09\x70\xcd\x9d\x70\x0c\xfe\xac\x2d\xe0\x81\xd7\x46\x62\x0e\x47\xdd\x40\x2d\x36\x5b\x0f\x86\x3b\x8a\x83\x89\x54\x44\x70\x3c\x28\x9e\x63\xac\x2e\x9b\x02\x83\x0c\x5c\xc1\xd6\x7b\xc3\xfe\xca\x55\x29\x89\xe3\x5e\xf8\x2d\x20\x2f\xb6\x7d\x38\xc3\x62\x38\x7d\x09\x7b\x61\xb1\x84\xc6\x44\x50\x67\xb0\x10\x95\x28\xc0\x70\xbf\x65\xb0\x78\x08\xfc\x84\x23\xfc\x35\x5f\xcb\x23\x70\xa8\x85\xf3\x31\x15\xa0\x44\x27\x36\x8a\xb6\x0a\xb5\xd3\x2f\x18\xa4\x7c\x8a\x6e\x19\x53\x27\x50\xc4\x73\x67\x47\x67\x10\xc4\xa0\x24\x5b\x4e\xd5\x2d\xa4\x40\xe5\xcf\xd5\x9d\x38\xee\x94\x85\xf2\x48\xb9\x1a\xe1\xb0\xfc\x9a\x1b\x29\x22\xa3\x56\x82\x14\xae\x31\x86\xd5\x89\xaf\x50\x1e\x6d\xc5\x29\xa0\xe6\x3d\x41\x60\xe3\x61\xf3\x95\xa0\x71\xb1\x66\xf5\xa9\xb7\x0a\x7e\x78\xc4\xfd\xbb\xde\x9e\x42\xd7\x6b\xa1\x82\x4e\x75\x4f\x71\xe2\xd8\xbc\xaf\x17\xbe\xb1\x0a\x44\x88\x64\x22\x58\x70\x29\xd1\xc6\x60\xee\xc9\xb2\x34\x98\x73\x21\x68\x9b\xb6\xad\xe5\x6a\x83\x70\x25\xe0\xf6\x0e\xd8\xb0\xfe\x43\x74\x46\xd7\xa5\x49\xdb\x5e\x09\xf6\xc8\x6b\xec\xba\x61\x3f\x00\x8c\x46\xb0\x61\x30\x6d\xdb\x1b\x1a\xed\xba\xb4\x4b\x53\x0a\x37\x78\xc4\xfd\x78\xe4\xa2\x4f\x3f\x30\x6b\xd6\xb6\xe3\x41\x11\xf8\x29\xf8\x74\x39\x21\xd8\xa6\x49\x6f\xd8\x38\xd6\x12\x97\xaf\xb1\xa5\x42\x91\x26\x73\x84\x6f\x89\x31\x15\xe4\x99\xb9\x81\xd8\x32\x27\xfc\x68\x40\x12\x6c\x98\x86\xe0\xb7\x85\xa2\x23\xda\x56\x54\xa0\x10\xd8\xe7\xbe\x88\x3f\x1f\x4d\xb4\x11\xb2\xfb\xda\xf8\x63\x06\x84\x1e\xc4\x59\x4c\xfc\xb1\x84\x09\xb1\x45\xe1\x0f\xd0\xd7\x55\xf6\x2e\x7e\x73\x8a\xfd\x9f\x83\x74\x7f\xd1\x01\xef\x4a\xb0\xcf\xf1\xd6\x18\xcf\xe8\xba\x25\x2c\x2e\x17\xbd\x62\xd2\x75\x39\xa0\xb5\xda\x2e\x49\x64\x62\x3d\xdc\x38\x61\x9c\xac\x43\x36\xa7\x53\xe1\x0f\x44\x63\x19\x2c\x4d\x44\x15\x56\xff\x74\x07\x4a\x48\x68\xe3\xe0\xe0\x33\x25\x64\x00\x8b\xa3\x51\x9b\x61\x6e\x38\x8d\x7d\x0f\xd5\x65\x4e\x58\x69\x32\xc8\x8b\xd2\xe1\x7f\x5d\xc1\x70\x19\xfd\x88\x88\xc9\x8f\x2a\x98\x5c\xc8\x97\x5c\x6a\x97\x24\x5d\x9a\xcc\xa8\xf6\x5d\xf4\x2e\x84\x0b\x71\x3d\x7c\x29\xb4\x3f\x50\x51\x9e\xc6\x77\x28\xfb\x57\x1e\x43\x7c\xc7\xcc\x9f\x86\xfc\x95\xc7\xb9\xf2\x10\x5d\xf1\x66\x6e\xc5\x74\x9f\xee\x3d\xcf\xf8\x8b\x32\x72\xa6\x05\x61\xcf\x3b\x73\xe8\x98\xc6\x2a\xdc\x92\xeb\xc6\xde\x69\x32\x1c\x7d\x32\x71\x16\xa1\x7f\x21\x8b\x7a\x8c\xb9\x40\xbc\x08\x8b\xb0\x6f\x37\xfa\xd7\xb1\x57\xe1\x16\x18\xc5\x55\x33\xae\x9d\x73\x6e\x74\xef\x38\xb3\xeb\x1d\x16\x87\xbb\x53\x2d\x9a\xfa\xec\x9f\x96\x9b\x3f\x4a\x79\x7f\x28\xd0\x78\xd8\x5b\x6e\x5c\xbc\xa8\x47\xf5\x2a\x81\xb2\xa4\x2e\xa5\xaf\xf0\xa7\x8a\x1a\xdc\x1b\x6e\xb8\x99\xe6\x8c\x7d\x10\x65\x29\x71\xcf\x6d\xec\x91\xff\xee\x86\xae\x99\xfa\x45\x63\xe4\x91\x2e\x2a\xba\x7c\x3d\x81\xd7\xe3\xea\xd0\x5d\xe0\x0e\xed\x71\x74\x25\x25\x1a\xdd\x43\x43\xbf\x45\x78\x1f\x0d\xf5\x1e\x74\xff\xe6\x93\xeb\xaf\xe0\x8a\x7a\x2f\xea\x58\xb0\xa4\x6d\xeb\x23\x28\xf2\x41\xec\xc9\xf0\x50\xc8\xa6\xc4\x32\x36\xcc\x6b\x24\x0a\x64\xb3\xc1\x92\x5d\xa8\xb1\x38\x71\xca\x21\x7b\xf2\xdc\x37\x2e\xcb\x21\xfb\x24\xd4\x26\x5b\xa6\x43\xc1\xf8\x79\x52\x31\xde\xda\x0f\x33\xaa\xe4\x27\x36\x8c\x31\xe7\xad\x50\x9b\x10\x4e\x42\xf5\xc3\xb7\x77\x50\x73\xf3\x6b\x9c\xfa\x2d\xca\xdf\x76\x6d\xb8\x90\x6e\xe0\x5b\xb7\x6c\x92\x64\x93\x88\xca\x6e\xa1\xed\xf2\x7e\xeb\x78\x25\xa5\x09\x79\xe3\x77\xa2\x12\xc2\x37\x40\x8e\xb4\xda\x58\x55\x7e\xcf\x41\xbf\xd0\xf4\x40\xec\x57\x3c\xfc\xf6\x0b\xfc\xa4\x5f\x62\x28\x1a\xae\x44\xb1\xa8\x6a\xcf\x9e\x8c\x15\xca\x57\x8b\xec\x7e\x80\x18\x3d\x78\xfd\x07\x77\x0d\xa5\x46\x07\x4a\x7b\xc0\x83\x70\xfe\x17\x70\x88\x53\xc7\x8f\xb1\xe3\xd8\x46\x67\x44\x6a\xb9\xec\x6b\x56\x89\x12\x3d\x2e\x06\x06\x61\xee\x64\x80\x50\xc5\x89\xfe\x28\xdf\xf7\x0b\x25\xaa\x00\x71\x77\x07\x67\x92\xf5\x99\x36\x5b\x79\xe1\x6e\xc2\x7c\x31\xbb\x64\x39\xa4\xde\x99\xe4\x31\xed\xfe\xc6\xd7\x28\xb1\x3c\x45\x43\x7c\x60\x6e\xd0\x0f\xb1\x3b\x7d\x13\xc4\x10\xde\x6f\x51\x8d\xb3\x7a\x12\xae\x3d\x58\x8c\xba\x3c\x66\x59\x9f\x08\x4d\x5c\x0c\xf1\xd5\xca\xe3\xd3\x57\x14\xd4\x1a\x5b\x51\xc4\x37\xcb\x84\xc3\x56\x14\xdb\xb0\xd5\xa1\x9a\xa3\xd0\xf7\x83\xfd\xee\xa1\x1b\xd6\xb6\xef\x06\x2f\xad\x0a\xe5\x36\x06\x70\x7e\x59\x99\x67\x8a\x75\xfa\x96\x5d\xff\x71\x6d\xba\x20\x95\xf7\x76\x06\xc5\x2d\x16\x28\x76\xf1\xdd\x10\x4c\x7c\xf5\x1c\x63\xf0\x84\x38\xc2\x4c\x50\xc2\xc4\xf0\x9c\x19\xf3\x9e\x88\x52\x44\x96\xe8\xb9\x90\xe1\xe9\x31\xa4\x53\x78\xf7\xf6\x4f\x26\x2e\x85\x3f\xb2\xaf\x95\x90\x33\xdb\xa7\x95\xe4\x87\x15\xfd\x7f\x9d\xf9\xdf\xa9\x33\x67\xdb\xf2\xf9\x9e\xf0\xad\xb2\xf3\xef\x00\x00\x00\xff\xff\xd4\x36\xab\x9b\xfe\x12\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4862, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcHandlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\xcc\x39\xf0\x7e\x35\x07\x7c\x13\xa5\x53\x8d\x0e\x2d\xa0\xc4\x63\x2c\x33\x00\x00\xff\xff\x52\xf7\x77\x02\x3f\x00\x00\x00")

func svcHandlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcHandlersHandlersGotemplate,
		"svc/handlers/handlers.gotemplate",
	)
}

func svcHandlersHandlersGotemplate() (*asset, error) {
	bytes, err := svcHandlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/handlers/handlers.gotemplate", size: 63, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcHandlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\xcc\x39\xf0\x7e\x35\x07\x7c\x13\xa5\x53\x8d\x0e\x2d\xa0\xc4\x63\x2c\x33\x00\x00\xff\xff\x52\xf7\x77\x02\x3f\x00\x00\x00")

func svcHandlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcHandlersHooksGotemplate,
		"svc/handlers/hooks.gotemplate",
	)
}

func svcHandlersHooksGotemplate() (*asset, error) {
	bytes, err := svcHandlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/handlers/hooks.gotemplate", size: 63, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcServeGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4f\x6f\xdb\xb8\x13\x3d\x8b\x9f\x62\x4a\xe0\xf7\x83\x0c\xb8\x54\x81\xdd\xee\x21\xdb\x1c\xda\x38\x6d\x03\x6c\x53\xc3\x71\x7b\x5d\x30\xd2\x48\x26\x2a\x91\xda\x21\xad\x34\x30\xf4\xdd\x17\x43\x49\xae\xd2\x6d\xbc\xe9\xfa\x60\x51\xe4\x9b\x37\x8f\xf3\x4f\x59\x06\x17\xae\x40\xa8\xd0\x22\xe9\x80\x05\xdc\xde\x43\xa0\xbd\xf7\x0a\x56\x1f\xe1\xfa\xe3\x16\x2e\x57\x57\x5b\x25\xb2\x0c\x36\x48\x7b\x6b\x8d\xad\x06\x00\xdc\x99\xba\x06\xd7\x21\xdd\x91\x09\x08\x61\x67\x3c\x94\xa6\xc6\x08\xfe\x8c\xe4\x8d\xb3\x67\x70\x38\xa8\x71\xdd\xf7\xb3\x03\x58\xe9\x80\xf3\x53\x7e\xef\x7b\x21\x5a\x9d\x7f\xd1\x15\x82\xef\x72\x21\x4c\xd3\x3a\x0a\x90\x0a\xe0\x9f\x2c\x6b\x5d\xc9\x71\xed\xfc\xb4\x2a\x9b\x20\x45\x22\x6b\x57\xf1\xc3\x62\x18\x1f\xd9\x2e\x84\x76\xbe\xce\xda\x96\x5c\x29\x85\x48\xb2\x0c\x7e\x29\x60\xad\x29\xdc\x8b\x44\x56\xce\x55\x35\xaa\xca\xd5\xda\x56\xca\x51\x95\x55\xd4\xe6\x23\x6e\xcb\xd7\xba\x41\xea\x4c\x8e\x22\x69\x6f\x41\x1e\x0e\x6a\xfd\xe6\x2a\x2a\x5b\xeb\xb0\x83\xe7\x7d\xcf\x5e\x0e\x07\xf5\x70\x13\x32\xdf\xe5\xd9\x4e\xdb\xa2\x46\xf2\x52\x2c\x84\xe8\x34\xc1\x0a\x4b\xbd\xaf\xc3\x85\xb3\xa5\xa9\x60\x78\x08\x51\xee\x6d\x0e\xc6\x9a\x90\x2e\xe0\x20\x12\xbe\xa9\xba\x09\x64\x6c\xf5\x59\x53\xfa\xff\x07\x46\x6a\x85\xb7\xfb\xea\x75\x51\xd0\x12\x64\xc1\x6b\xa5\x8b\x82\xe4\x12\xe4\xd9\xcb\x17\xbf\xbd\xe0\x45\x84\x80\xb6\x05\x34\x18\xc8\xe4\x1e\x6a\xe3\x03\x5a\x60\x24\x7a\x2f\x17\xff\xe6\xe4\xfd\x76\xbb\x1e\x7d\x70\xf0\xe6\x2e\x5e\x46\x17\x0c\xf8\x69\xd6\x77\x9b\xf5\xc5\xc8\xca\x41\x9e\xb3\xfe\x1a\x59\xab\xcd\xfa\x02\x52\xe6\x5e\xfc\x93\x3c\x66\xe4\x93\x47\x40\xdb\x19\x72\xb6\x41\x1b\xa0\xd3\x64\xf4\x6d\x8d\x7e\x09\xa6\x04\x8f\x41\xc1\xdb\x5a\x57\x1e\x76\xba\x43\x68\xc9\x38\x32\xe1\x3e\x56\x2a\x5c\xda\x8e\xf1\x5e\x89\xc4\x94\x91\x18\xce\xce\xc1\x79\xf5\x0e\x03\xda\x2e\x95\xab\xcb\x37\x9f\xde\xfd\xf9\x7a\xb5\xda\xc8\xc5\xef\x03\xe0\xd9\x39\x48\xc9\x49\x49\x1e\xc9\x02\x9c\x47\xa0\x48\xfa\xc8\x1a\x4b\xf6\x21\xeb\xfa\xe3\x66\xcb\x7c\xf1\xe8\x31\xbe\x29\xe0\x70\x0e\x65\x13\xd4\x4d\x4b\xc6\x86\x32\x95\x67\xff\xf3\x72\x19\x4d\x17\x93\x8b\x1f\x08\x67\xeb\xa7\xe9\x9e\xf9\x99\xcb\xfe\x01\x27\x27\xeb\x69\x9c\x53\x5a\x67\x9c\xbd\x10\x71\xba\xc4\x32\xcf\x9d\x0d\xda\x58\x0f\x61\x87\x40\xf8\xd7\xde\x10\x16\x50\x1a\xac\x0b\x0f\xa5\x23\x98\x46\x8b\x06\x8f\xd4\x21\x89\x70\xdf\xe2\x64\xed\x03\xed\xf3\xc0\x6e\x8f\xda\x7d\x2c\x30\x91\x7c\x4b\xc2\xb4\x73\x94\x32\x6e\x0c\x3a\xb8\x83\x11\x7c\xd0\x14\x3c\x68\xb0\x78\x07\x5c\xd5\xa3\xb7\x25\xc4\xb2\x9b\x5e\xb8\x6d\x34\xc4\xce\x1a\xf7\xe0\xce\x84\x1d\x8b\x67\xae\x56\x7b\x8f\x05\xdf\x89\xc5\x31\xb8\x76\x55\x85\x34\x34\x71\xf4\x94\xe6\xe5\xd4\xdb\xb1\x9f\xfd\x30\x40\x38\xbe\xd3\x40\x50\xd7\x78\x37\xce\x95\x74\x21\x12\xb4\x45\xeb\x8c\x0d\x9e\x31\xd7\x78\x77\x39\xbd\xa7\xa3\xed\x58\xfd\x1f\x30\xdf\x69\x6b\x72\x5d\x43\xe1\x1a\x6d\xac\x12\x09\x12\xe5\x6c\xd6\xe8\x2f\x98\xf2\x31\x20\x91\xa3\xd1\xe2\xca\x06\x24\xda\xb7\x61\x72\xad\x44\x52\xb9\x6f\x3a\x8e\xe7\xef\x87\x9d\x94\xe9\x46\xdb\x61\x8c\x0c\x7d\x38\x19\xf2\x2d\x87\x29\x95\xd4\xae\x52\x6b\x2e\xd3\xda\xa6\x32\x90\xb6\x9e\xcb\x54\x4e\x63\x89\x17\x63\x83\xe7\xe5\xac\x61\x98\x3c\x69\x62\x30\x78\xb2\x8c\x81\xc0\x0f\xfb\xaf\x1c\x89\xa4\x51\x83\x92\x54\x66\x91\x66\x98\xdb\x99\x5c\x0e\xf0\x51\xe6\x5b\x96\x11\x4f\xd4\x95\x2d\xf0\xeb\xe2\x84\x69\xde\x14\xb5\xb1\xf8\x38\xc3\xc5\x00\x38\xc5\xc1\x7f\xa6\x3e\xc1\xb1\x1e\x00\xa7\x38\xfc\x7d\x73\xeb\xea\xc7\x29\x6e\xe2\xf9\x29\x86\x40\x3a\x3f\xa1\x61\xcb\xc7\x8b\x18\xdf\x58\x14\xaf\x9e\x0f\xc8\x3f\x62\x06\x5f\xdb\xe2\x58\x9d\xf3\x8f\x48\xc3\x83\x25\x1d\x53\x1e\xc7\xfa\x31\x97\x3f\x91\x72\x36\xfc\x2e\xe3\x53\xbb\xf2\x85\x76\x9c\xef\x0f\xfa\x0b\xf2\xe6\xb1\xd4\xa6\x2a\x5f\x3c\x41\xf1\xb7\x2f\xd2\x6e\x2e\x38\xb6\xee\x7f\x11\xcc\x86\x72\x39\xd7\x3b\xcd\x0e\x56\x53\xdb\x25\xb7\x11\xab\xb6\x18\x46\x3d\xa9\x0c\x79\xfb\x03\xb0\x29\x23\xf6\xd9\x39\x58\x53\x47\xb7\xc7\xdb\x20\x11\xbf\x12\x86\x3d\x59\x91\x24\x3d\x27\xc7\x53\x37\x85\x83\x69\xe2\x1d\xbf\x8b\x46\x1c\x04\xf1\x1b\x39\xf5\x07\xc5\xee\x68\x6f\xd5\x06\x2b\x56\x43\x87\x83\x1a\x27\x88\xba\xd6\x0d\xf6\xfd\x08\xf3\x4b\xf0\xd4\x3d\xa8\x02\xaf\x86\x38\xd6\x76\x1e\xba\xcd\xde\x3e\x13\x0f\x23\x84\x5f\x0d\x07\xe7\xd5\xf3\x61\x0a\xf4\x42\xfc\x1d\x00\x00\xff\xff\x5d\x0b\x13\xfb\x24\x0a\x00\x00")

func svcServeGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServeGotemplate,
		"svc/serve.gotemplate",
	)
}

func svcServeGotemplate() (*asset, error) {
	bytes, err := svcServeGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/serve.gotemplate", size: 2596, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5b\x6f\xdb\x36\x14\x7e\x16\x7f\xc5\x99\x51\x0c\x76\xe1\x50\x7b\x0e\x90\x97\x26\x59\x5b\x6c\x6d\x83\x2c\xe8\x1e\x8a\xa2\xa0\xa5\x63\x89\xb0\x44\x2a\x24\xe5\xc4\x23\xf4\xdf\x87\x43\xdd\x7c\x4b\x6c\xec\x61\xc3\x0c\x04\xb1\xc5\x8f\xe7\xf2\x7d\xe7\x1c\x52\x71\x0c\xd7\x3a\x45\xc8\x50\xa1\x11\x0e\x53\x58\x6c\xc0\x99\xda\x5a\x0e\x37\x5f\xe0\xf3\x97\x07\xb8\xbd\xf9\xf8\xc0\x59\x1c\xc3\x3d\x9a\x5a\x29\xa9\xb2\x16\x00\x4f\xb2\x28\x40\xaf\xd1\x3c\x19\xe9\x10\x5c\x2e\x2d\x2c\x65\x81\x01\xfc\x15\x8d\x95\x5a\x5d\x82\xf7\xbc\xfb\xde\x34\x5b\x0b\x70\x23\x1c\x6e\xaf\xd2\xef\xa6\x61\xac\x12\xc9\x4a\x64\x08\x76\x9d\x30\xc2\x3f\xf4\x66\xa1\x32\x7a\x2d\x53\xb4\x60\xd1\xac\xd1\x5c\x58\x99\x22\x2c\xa4\x4a\xa5\xca\x2c\x2c\xb5\x01\x97\x23\x64\xf7\x77\xd7\xe0\x8c\x50\xb6\xd2\xc6\x85\x58\x3e\x3a\xa8\x9d\x2c\xe4\x5f\x68\x03\x64\x58\x8d\x33\x53\x25\xfc\x8f\x60\x8e\x33\x26\x4b\x7a\x08\x53\x16\x4d\x14\xba\x38\x77\xae\x9a\xb0\x68\x92\x68\xe5\xf0\xd9\x4d\x18\x8b\x26\x99\xd6\x59\x81\x3c\xd3\x85\x50\x19\xd7\x26\x0b\x26\xe2\x12\x9d\x48\x85\x13\x84\xa1\x07\x83\x07\x98\x64\xd2\xe5\xf5\x82\x27\xba\x8c\x33\x7d\xb1\x92\x2e\xa6\xbf\xdd\x10\xc8\xcb\x0e\x2e\xd3\x71\x65\xb4\xd3\x8b\x7a\x19\xbb\x4d\x85\x96\x0c\xf7\x64\x50\xbc\x32\x41\x16\x55\x0b\x98\x78\xcf\xef\xde\x7d\x0c\x81\xdf\x09\x97\xc3\x45\xd3\x4c\xd8\x2c\x30\xf7\x49\xac\xf0\xfd\xfd\xdd\x75\x9b\x1f\x94\x62\x85\x16\x04\x58\x74\xa0\x97\x80\x2a\xad\xb4\x54\xce\x82\x58\x0b\x59\x88\x45\x81\x20\x68\x3d\x10\xe8\x3d\xef\xdc\xf0\xcf\xa2\xc4\xa6\xe9\x49\x5a\xd6\x2a\xd9\xb3\x3c\x1d\x4d\xdd\xf6\xdf\xe6\xa0\x2b\x27\xb5\xb2\xc0\x39\xdf\x61\xa4\xa3\xfb\x4b\x58\x9e\x41\xb5\xe0\x2f\xf8\x02\xcf\x22\xbb\x85\xb5\x70\x79\x05\xdf\xbe\xbf\x6c\xcc\xb3\x28\x3a\xb6\xfa\x0e\x97\xda\xe0\xb4\xd7\xe8\x41\x5f\xb7\x82\xce\xe6\x2c\x6a\xf6\x7d\x5c\x81\xa8\x2a\x54\xe9\x74\xe7\xf1\x90\x0e\xe7\x7c\xc6\x22\x83\xae\x36\x0a\x7e\x26\x6f\xad\x0f\x1f\xe4\xf1\x1e\x1e\xf4\xef\xfa\x09\x0d\xec\xa4\x04\x4d\xc3\x22\xef\x8d\x50\x19\xc2\x1b\x49\x89\x0c\xeb\x9f\xd0\xe5\x3a\xb5\x84\x88\xbc\xef\xb7\xbf\x91\x1d\x17\x97\xb0\x9b\xd2\x67\x7c\xea\x58\x67\x51\x14\x0d\xcc\x73\xef\x87\x2d\xbd\x08\x73\x42\xdc\x60\xa2\xd3\x20\xd6\x16\xe2\x1e\x1f\x6b\xb4\x2d\xe0\x56\x1d\x05\xd8\x4a\x2b\x8b\x01\xb1\xc3\x04\xe7\x9c\x1e\x12\x77\xde\x5f\x50\x15\x51\xe4\x0d\x6b\x42\xc9\x8d\x84\x80\x2c\xab\x02\x4b\xa4\xaa\xa0\x9e\xf3\xfe\xbd\x0e\x54\x1c\xd7\x5a\x2a\x87\x66\x29\x12\x64\x54\xee\xdb\x76\xac\x33\x75\xe2\xc0\xb3\xd3\xfc\x1d\xa1\x0f\x60\x8f\xbf\x0f\x42\xa5\x05\x1a\x36\x06\xdf\x46\xde\x99\x09\x63\x64\xcb\xbb\xd3\x63\x22\xe7\xe7\x70\x32\x54\x00\x00\xef\xe5\x12\x14\x02\xef\xc9\x7e\xd8\x54\x5d\xb9\x4c\x6e\xcb\xca\x6d\x26\xd0\x21\x43\xcf\x4d\x2d\xbc\x1d\x03\x9b\x8d\xc1\x0c\xb9\x4e\x13\xf7\x0c\xdd\xb0\xe2\x5d\x8d\xcf\xc1\xe0\x23\xbc\x0d\x5d\x36\xe2\x3b\xfd\x07\x87\x4d\x33\x83\xe9\x21\x68\x2f\xac\xa6\x99\x03\x1a\xa3\xc9\x79\x88\x8b\x3e\x3f\xc8\x43\x15\x16\x28\x57\x2a\xc4\x03\x11\xda\x3e\xa4\x12\xa3\x10\x43\x48\xb3\xc1\x80\x5c\x86\xbd\x3f\x5d\x81\x92\xc5\x96\x61\xfa\x74\x7d\xa6\x64\x11\x1c\x0c\x6b\x0d\xdb\x43\x18\xac\xf8\x39\x09\xcc\xe6\x64\x8c\x8d\x36\xbc\xc7\xc2\xe2\xbf\xcb\x73\x18\xe8\xff\x73\xaa\xcf\xca\xe1\x18\xdb\xa1\xe5\xfa\xff\xd4\x78\x5d\xf3\xb4\x73\xea\x74\xe7\xc4\x31\xbc\x36\xd2\x40\xd2\x11\xb6\x77\xc0\xb7\x1b\x3a\xc4\xaf\x24\xb2\xcb\x85\x23\x09\xd7\x68\xe8\x00\x0c\xa3\xab\x3d\xf6\x0e\x27\x88\xe9\x2c\x3b\x0d\x02\x6a\x8b\xe6\x22\xd5\xa5\x90\xea\x35\x30\x87\x3b\x23\x4b\x61\x64\xb1\xa1\x2d\xcb\xba\x00\xa9\xc2\xd9\xbb\x75\x8a\xbe\x96\xc7\xf4\xc7\x61\x85\x51\x2e\xf7\xf8\x38\xce\x19\x4f\xe5\xb4\xf5\x6b\xab\x66\x22\x2a\xc7\xcb\xab\x7e\xcf\xb1\xe6\x38\x28\xcd\xe1\x5c\x33\xf8\xd8\x2a\x77\x54\xa9\xf6\xc0\x38\x4b\xa9\x57\xcf\x96\xa3\x52\xb5\x3b\x7a\xc8\x4b\x5a\x9d\x56\xa1\x73\x11\x34\x7b\x45\xd9\xaa\xd8\x9c\x92\xea\x1f\x8c\xea\x57\xd3\x3e\xa6\xec\x10\xef\x39\xd2\x8e\xfd\x68\x2b\xa2\xbe\xdf\x7c\xde\x00\x3c\x6c\x67\x5b\x9d\x1e\x8a\xff\x59\x46\xe7\xcd\x99\x53\x49\x45\xc7\x06\xcf\x07\x2c\x2a\x34\x96\xb5\xcd\x78\x70\x3b\x3c\x3e\xe5\xcb\x74\x40\xf2\x4f\x37\xb3\x7d\x00\x75\x1e\xdd\x20\x56\x73\x58\x87\x4c\x42\x8b\x94\x29\x3d\x8f\xe4\x12\xd6\xe3\xf0\x8d\xa2\xf6\x42\x8f\xb0\xc2\x4d\xe8\x85\x34\xa5\xd7\x2f\xed\x72\x2a\xc0\xde\x0b\x5d\x48\x4a\xe1\x60\xba\x9a\xc1\x53\x2e\x93\x3c\x40\x8b\x02\x0a\x2a\xe6\xce\x8a\x50\x69\xb8\x64\xd1\x1b\x0b\xbf\x16\x4a\x2b\x99\x88\xe2\x03\x8a\x14\xcd\x6f\xb8\xa1\xeb\xbe\xeb\x1c\x59\xdd\x36\x94\x74\x90\x08\x05\x0b\xec\x4d\x24\x09\x5a\x8b\x29\xf9\x46\xe9\x72\x34\x9d\x67\x5a\x27\x2a\xae\x86\x5c\xff\x94\x2e\xff\x2a\x8a\x1a\xdb\x23\x86\x72\xfd\xf6\xcb\xf7\xd9\x49\xe0\x0b\xd1\x4d\x57\xb3\xd1\x42\xb8\x4b\x0e\x83\x28\x71\xcf\xac\x61\x7f\x07\x00\x00\xff\xff\xc4\xec\x0c\xfa\xa4\x0e\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3748, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 106, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/grpc/client.gotemplate": clientGrpcClientGotemplate,
	"client/http/client.gotemplate": clientHttpClientGotemplate,
	"cmd/server/main.gotemplate": cmdServerMainGotemplate,
	"svc/endpoints.gotemplate": svcEndpointsGotemplate,
	"svc/handlers/handlers.gotemplate": svcHandlersHandlersGotemplate,
	"svc/handlers/hooks.gotemplate": svcHandlersHooksGotemplate,
	"svc/serve.gotemplate": svcServeGotemplate,
	"svc/transport_grpc.gotemplate": svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate": svcTransport_httpGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"grpc": &bintree{nil, map[string]*bintree{
			"client.gotemplate": &bintree{clientGrpcClientGotemplate, map[string]*bintree{}},
		}},
		"http": &bintree{nil, map[string]*bintree{
			"client.gotemplate": &bintree{clientHttpClientGotemplate, map[string]*bintree{}},
		}},
	}},
	"cmd": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"main.gotemplate": &bintree{cmdServerMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"svc": &bintree{nil, map[string]*bintree{
		"endpoints.gotemplate": &bintree{svcEndpointsGotemplate, map[string]*bintree{}},
		"handlers": &bintree{nil, map[string]*bintree{
			"handlers.gotemplate": &bintree{svcHandlersHandlersGotemplate, map[string]*bintree{}},
			"hooks.gotemplate": &bintree{svcHandlersHooksGotemplate, map[string]*bintree{}},
		}},
		"serve.gotemplate": &bintree{svcServeGotemplate, map[string]*bintree{}},
		"transport_grpc.gotemplate": &bintree{svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": &bintree{svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

