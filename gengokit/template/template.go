// Code generated by go-bindata.
// sources:
// NAMEservice/client/grpc/client.gotemplate
// NAMEservice/client/http/client.gotemplate
// NAMEservice/cmd/server/main.gotemplate
// NAMEservice/svc/endpoints.gotemplate
// NAMEservice/svc/handlers/handlers.gotemplate
// NAMEservice/svc/handlers/hooks.gotemplate
// NAMEservice/svc/serve.gotemplate
// NAMEservice/svc/transport_grpc.gotemplate
// NAMEservice/svc/transport_http.gotemplate
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4f\x6f\xdb\x3a\x12\x3f\x8b\x9f\x62\xd6\x08\x16\x52\xa0\x50\xf7\x2c\x72\xa9\x93\x2d\xba\xd8\xa6\x41\x1a\xf4\x1d\x8a\xa2\xa0\xa9\x91\x4c\x58\x26\x55\x92\x76\x62\x08\xfa\xee\x0f\x43\x4a\x8e\x9c\x38\x6e\x2e\x0f\xef\xf2\x0a\x34\x11\x39\x3f\xce\xbf\xdf\x70\x38\x29\x0a\x98\x9b\x12\xa1\x46\x8d\x56\x78\x2c\x61\xb1\x03\x6f\x37\xce\x71\xb8\xfe\x02\xb7\x5f\x1e\xe0\xe6\xfa\xd3\x03\x67\x45\x01\xf7\x68\x37\x5a\x2b\x5d\x47\x00\x3c\xaa\xa6\x01\xb3\x45\xfb\x68\x95\x47\xf0\x4b\xe5\xa0\x52\x0d\x06\xf0\x37\xb4\x4e\x19\x7d\x09\x5d\xc7\x87\xef\xbe\x9f\x08\xe0\x5a\x78\x9c\x4a\x69\xdd\xf7\x8c\x20\x77\x42\xae\x44\x8d\x50\xdb\x56\x42\x6b\xcd\x56\x95\xe8\x40\x40\x7d\x7f\x37\x07\xd9\x28\xd4\x1e\x2a\x63\xc1\x2f\x91\x14\x7c\x45\xbb\x55\x12\xf9\xad\x58\x63\xdf\x83\x1b\x96\xac\x9d\xa8\x61\x4c\xad\x5b\x63\x3d\xa4\x2c\x99\x49\xa3\x3d\x3e\xf9\x19\x4b\x66\xb5\x31\x75\x83\xbc\x36\x8d\xd0\x35\x37\xb6\x2e\x08\xfd\xb6\xa4\x58\xa3\x17\xa5\xf0\x22\x40\x94\x5f\x6e\x16\x5c\x9a\x75\xd1\xae\xea\x02\xad\x35\xd6\xcd\xd8\xa1\xa4\x36\x17\x2b\xe5\x0b\xfa\x8f\xba\x6c\x8d\xd2\x64\x98\x74\x79\x2b\xb4\x0b\x4e\xbd\x81\xdf\x03\x9e\x9d\x9a\xe2\x6a\x53\xb4\xd6\x78\xb3\xd8\x54\x85\xdf\xb5\x18\x4c\x17\x05\x3c\x10\x11\x43\x52\x58\x32\xeb\x3a\xfe\x29\xc4\x7e\x27\xfc\x12\x2e\xfa\x1e\x0a\xb7\x25\x6d\xed\x02\x48\x78\xf7\xe1\x50\x3c\x63\x59\x60\xe1\x16\x1f\xc1\xa2\xdf\x58\xed\x40\xe8\x31\xad\xb0\x10\x72\x15\xcb\xe4\x90\x10\x69\xb4\x46\xe9\x95\xd1\x1c\x3e\x79\x50\x8e\xe8\x21\x3d\x16\x5d\x6b\xb4\x53\x0b\xd5\x28\xbf\x03\x53\x05\xde\xa4\x68\x1a\xb4\xe0\x0d\x94\x4a\x34\x39\x08\x5d\x42\x23\x3c\x5a\x90\x8d\x71\x98\x47\xd0\xb3\x4e\x56\x6d\xb4\x24\x9f\x52\xda\x84\x73\xca\x08\x9f\x07\xd3\x73\xa3\x75\x0e\xa6\x25\x9c\x03\xce\x87\xed\x2f\x61\x23\x83\xb4\x5d\xf0\x57\x55\x42\x2b\xb4\x39\x04\xce\x32\xe8\x58\xb2\x15\x16\xa4\x1c\xa2\x99\x1b\x5d\xa9\x9a\xb1\x84\xca\xec\x67\x0e\x15\x5c\x5e\x81\x15\xba\xc6\xbd\x9d\x8e\x25\x09\x5a\x4b\x82\x2a\xfd\xb7\x94\x19\x4b\x12\x55\x91\x42\xf8\xd7\x15\x68\xd5\x04\x44\x12\x33\x48\xeb\xc1\x98\xe3\x7f\x58\xd1\xa6\x68\x6d\x0e\x33\x29\xb4\x36\x1e\x44\xdb\x36\xbb\x41\xf3\x8c\x14\xf5\x2c\xe9\x19\x4b\xe4\x24\x10\x47\x96\xbe\xff\x38\x28\x9c\x83\x48\xc9\xdc\x31\xe9\x07\xac\x8c\xc5\x94\x9c\x19\x0a\xff\x9b\x68\x36\xe8\x1e\xcc\xc7\xfb\xbb\xf9\xe7\xa1\x9e\x53\x29\xf9\x12\x45\x89\xd6\x65\x59\x4e\xe6\x93\xae\xbb\x80\x47\xe5\x97\x70\xe6\x91\x8c\xf3\xbe\x67\xc9\x64\xb7\x5d\xd5\x94\x4c\x12\x9d\x79\xe4\xc3\xad\x8d\xf9\x25\x6b\x84\x8c\x39\x3b\x53\x23\x68\x64\xe1\x33\xfa\xa5\x29\x5d\xdf\x33\x00\x80\x24\xa1\x9f\x5d\xa7\x2a\xd0\x08\xfc\x3e\x56\x0c\x3e\xec\xda\xc8\x17\xcc\x6e\xd6\xad\xdf\xcd\x20\x2a\x0e\x5c\x75\xdd\x83\xf9\xbf\x79\x44\x0b\x67\x6a\x20\xf5\x66\xb8\x5f\x30\x5e\x34\x3e\xee\x84\x53\x81\x0f\x72\xeb\xed\x83\x57\x70\x98\xc1\x5b\x7c\x8c\x49\x4c\xe3\x59\xca\xa0\xce\x87\xef\x59\xd7\x8d\x39\xe8\x7b\xde\x75\xd3\xf8\xe2\xe6\x6c\x0a\x55\x2f\x37\x6f\xb4\x34\x25\x12\x09\x13\xe9\x3d\xfe\xda\xa0\xf3\x23\xe6\x1a\x8f\x62\x62\x7e\x46\x50\x28\xf0\x8f\x26\x64\xea\x4c\xbd\x4e\x5f\xdf\x77\xfd\x88\x3d\x28\x29\xce\xf9\xb0\x9f\xed\x53\x95\x66\x61\x27\x26\xba\xeb\xb0\x71\x38\xb0\x34\xfd\xf7\x0f\x03\x07\x0c\x84\xf6\xfb\x17\x92\xa0\xcb\xf1\x4a\x8d\x9f\xfb\xaf\xf1\x83\x8d\xad\xc6\x6d\xe5\x5e\x8f\xeb\x08\x30\xbd\x84\x2f\x6f\x20\x75\xfc\xa0\xee\x15\x15\x97\xf1\x4e\xbe\x49\x55\xfe\x6c\x3b\xe9\x73\xea\x70\x2c\x3e\xdf\x94\x2b\x88\xa4\x41\xcc\x1e\x3b\xed\x43\x1c\x0c\x4e\x26\x9a\xde\x13\x01\x87\x0f\x22\x8f\x27\x46\xc8\x7f\xe9\x81\xf0\x4b\x11\x9e\xa2\x2d\x5a\xef\x40\x90\xde\xf0\x48\x1d\x89\x03\x2c\x52\xd7\xf5\x06\x04\x6c\x1c\xda\x8b\xd2\xac\x85\xd2\x6f\x40\xa3\x0d\x0e\x77\x56\xad\x85\x55\xcd\x8e\xce\x54\x9b\x06\x94\x06\x31\xbc\x1a\x9c\xbd\xbf\x8d\x11\x32\x3c\x69\x27\xc3\x4e\x7f\xc2\xd0\xb3\xf9\x3c\xfe\xce\xc3\xfd\xb8\x0f\xae\x2b\xed\xd1\x56\x42\x62\xd7\x67\x90\x4e\x56\x93\x77\x6d\xbc\xb0\x31\xd8\xcb\xab\xe7\xe3\x3c\x3d\xff\x7d\xe3\xc8\x26\x0a\x42\x75\x05\x3d\x91\x6d\xda\xed\x87\x90\x27\x6d\xe2\x6f\x8f\xea\x5d\x97\xf1\x5d\x81\xed\x0b\x7c\x7f\xc9\x5e\x94\x77\x6c\x20\xef\x2a\xef\x53\xbd\xe6\x68\x75\xc7\x03\x03\xe2\xad\xe2\xfe\x7d\xe1\x46\x03\xa1\xca\x4f\xdc\x84\x80\xfa\x5d\x75\x07\x66\x4f\xc5\x71\x8c\xd8\xd1\x83\xf7\xd0\x9a\x58\xfc\x15\x26\xad\xc1\x9f\x23\x15\x1a\x04\x07\x3c\x26\x7b\x02\x7f\x8d\x5d\x68\x4f\x17\xa3\x5a\x38\x98\xe9\xc0\x79\xbb\x91\x9e\x8c\x0d\xe3\x0e\x7c\xff\xe1\xbc\x55\xba\x1e\xda\xd7\x74\xa6\x8a\xc4\x50\xdc\x61\x15\x08\x58\x9b\x52\x55\x0a\x5d\x9c\x50\xf7\xc3\x2f\xcd\x8b\xc1\xda\xc1\x79\x3a\x9a\x9e\x4f\x1d\xc8\x62\xb8\x2c\x66\x73\xee\x9f\xc6\x69\xec\x2b\xea\x32\x5d\xe1\x2e\x8c\xb0\xd1\xa3\xec\x50\x59\xb7\x8f\x35\xa8\x35\x70\x4c\x71\x18\x3b\xcd\x38\xcb\xc1\x15\x90\x4a\x36\x1d\x44\x69\xb8\xeb\x07\xfb\xa7\x26\xc2\xe0\xcb\x98\x9c\x0c\x8e\xcd\x96\xd3\xea\x7c\xe1\x9d\xf4\x4f\xaf\x8b\x61\x5d\xc2\xf9\xf8\x17\x14\xff\x7c\x9d\xbd\x44\x04\xe7\x69\xb6\x68\x85\x9a\x32\x93\x8c\x83\xf8\xea\x79\x10\x0f\xee\x85\x89\x42\x55\xb0\xcd\xc1\x04\x99\xf4\x4f\x3c\x44\x93\xae\x32\x9e\x0e\xbe\xff\x87\x84\x71\xf8\x88\x8a\xaf\x68\xe4\xa6\x7c\x87\x65\x0e\xab\x1c\xb6\xe1\xc9\xed\xc3\xf0\x1d\x47\xf9\x08\x9d\x0e\xf3\xe7\xeb\x12\xae\x60\x1f\xc0\xff\x8c\xd2\xe9\xf9\xba\xcc\x9f\xb7\xee\xe8\x4c\xd4\xca\x39\xcf\xb2\x51\xdd\x90\x19\xe9\x9f\x62\xf6\xff\x0c\x00\x00\xff\xff\x1e\xb7\x82\xca\x78\x0f\x00\x00")

func clientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_clientGrpcClientGotemplate,
		"client/grpc/client.gotemplate",
	)
}

func clientGrpcClientGotemplate() (*asset, error) {
	bytes, err := clientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/grpc/client.gotemplate", size: 3960, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func clientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_clientHttpClientGotemplate,
		"client/http/client.gotemplate",
	)
}

func clientHttpClientGotemplate() (*asset, error) {
	bytes, err := clientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/http/client.gotemplate", size: 105, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdServerMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x6e\xb3\x30\x10\x84\xcf\xec\x53\x8c\x38\xc1\xe1\xc7\xf7\xff\x1a\x7a\xc8\xa5\x89\xda\xb4\x77\x07\x06\xb0\x4a\x0c\xb2\x0d\x51\x84\xfc\xee\x95\x69\x55\xe5\xe4\xb1\xe6\xdb\x9d\xdd\x55\x0a\x87\xa9\x25\x7a\x5a\x3a\x1d\xd8\xe2\xfa\x40\x70\x8b\xf7\x15\xea\x13\x5e\x4f\x17\xbc\xd4\xc7\x4b\x25\x4a\xe1\x8d\x6e\xb1\xd6\xd8\xfe\x07\xc0\xdd\x8c\x23\xa6\x95\xee\xee\x4c\x20\xc2\x60\x3c\x3a\x33\x72\x87\x3f\xe9\xbc\x99\xec\x7f\x6c\x5b\xf5\xab\x63\x7c\x32\x50\xeb\xc0\x67\x37\xfd\x63\x14\x99\x75\xf3\xa5\x7b\xe2\xa6\x8d\x15\x31\xb7\x79\x72\x01\x85\x64\x79\x37\xea\x3e\x17\xc9\x94\xc2\x25\x45\xbd\xd3\xad\xa6\xa1\x64\xf9\xb6\x55\xc7\x9d\x3b\xeb\x30\xe0\x5f\x8c\x50\x7e\x6d\x72\x29\x45\xba\xc5\x36\x7b\xab\xa2\xc4\xb6\xd7\x7e\xcc\xad\x0e\x84\x6e\x5b\x47\xef\xe9\x61\x3a\x84\x81\x0f\x0c\x7a\x25\xae\xa4\xfd\xdb\x29\xd0\xa6\x73\xa4\x60\x2f\x59\x7a\xaa\xb3\x76\x9e\x45\x29\x92\xf9\xb5\xa9\xd2\x08\x2c\x92\xaa\xd9\xe9\x65\x0c\x87\xc9\x76\xa6\x2f\x25\xca\x77\x00\x00\x00\xff\xff\x22\x5d\x53\x8d\x59\x01\x00\x00")

func cmdServerMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdServerMainGotemplate,
		"cmd/server/main.gotemplate",
	)
}

func cmdServerMainGotemplate() (*asset, error) {
	bytes, err := cmdServerMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/server/main.gotemplate", size: 345, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5d\x6f\xdb\x3a\x12\x7d\x96\x7e\xc5\x54\xc8\x22\x76\xa1\xd0\xef\x29\xf2\xb0\xdb\x66\x77\x03\x6c\x3f\xd0\x64\x77\x1f\x8a\xa2\xa0\xa5\x91\x4d\x84\x22\x59\x92\xb2\xe3\x15\xf4\xdf\x17\x43\x4a\xb2\x1c\xab\x5f\x17\xb8\x2f\x17\xf7\xa1\x70\xc3\x8f\xc3\x33\xe7\x0c\x87\xa3\xd5\x0a\x5e\xeb\x12\x61\x83\x0a\x2d\xf7\x58\xc2\xfa\x00\xde\x36\xce\x31\x78\xf3\x1e\xde\xbd\x7f\x80\xdb\x37\x77\x0f\x2c\x5d\xad\xe0\x23\xda\x46\x29\xa1\x36\x71\x01\xec\x85\x94\xa0\x77\x68\xf7\x56\x78\x04\xbf\x15\x0e\x2a\x21\x31\x2c\xfe\x0f\x5a\x27\xb4\xba\x86\xb6\x65\xfd\xff\xbb\x6e\x32\x01\x6f\xb8\xc7\xe9\x2c\xfd\xdd\x75\x69\x6a\x78\xf1\xc8\x37\x08\x6e\x57\xa4\xb4\xfe\x61\x80\x85\x42\x2b\xcf\x85\x72\x50\xa3\xdf\xea\xd2\x81\xd7\x50\xf3\x47\x04\xa1\x4a\xb1\x13\x65\xc3\x25\xa0\x2a\x8d\x16\xca\x3b\xa8\xac\xae\xc1\xa1\xdd\x89\x02\x5d\x4e\x48\x16\xbf\x36\xe8\x3c\x70\x55\x82\x45\x67\xb4\x72\x08\xfe\x60\x30\x20\xd1\x52\x0a\x42\x3b\x3c\xa2\xe4\xc0\x1d\xec\x51\x4a\xfa\x45\x55\xe8\x12\xad\x23\x00\xc2\x2b\xb1\xff\xbb\xd2\xb6\xdf\x18\xd0\xf2\x30\xc0\x49\x9c\x0a\x74\x63\xc1\x35\xc6\x68\x4b\xe2\x7a\xcb\x95\xa3\xff\xd3\x71\x82\x4b\xf1\x3f\xee\x85\x56\x84\x56\x69\x5b\x73\xef\x58\x9a\x8a\x3a\xac\x58\xa4\x49\x56\xd5\x3e\x4b\x93\x8c\x22\xc7\x27\x9f\xa5\x69\x92\x6d\x84\xdf\x36\x6b\x56\xe8\x7a\xb5\xd1\x57\x8f\xc2\xaf\xe8\xdf\xc0\x38\x7b\xbe\x62\xa3\x57\xc6\x6a\xaf\xd7\x4d\xb5\x0a\xec\x08\xc4\xac\x21\x6b\x5b\xf6\xe1\x6f\x77\xe1\xa8\x0f\xdc\x6f\xe1\xaa\xeb\xb2\x74\x19\x24\xbf\x1d\x45\x2c\xb4\x94\x58\x78\x37\x44\xe3\xb7\x13\x71\xc0\x6f\xb9\x87\x42\xd7\x86\x42\xe7\x0a\x78\x59\x0e\x8a\x33\xb8\xf3\x97\x8e\xc0\x6a\xe4\xca\x93\xc0\x6b\x84\xc6\x61\x49\x4a\x72\xd8\xa2\x34\x68\xc1\x79\xdb\x14\x3e\xa7\xe9\xfe\xa8\xf9\x93\x84\xf2\x1a\x38\xc1\x39\xa1\x36\x12\xc1\x70\xcb\x6b\xf4\x68\x29\xd9\x68\xfc\x4e\x01\x8f\x1e\xda\x1c\x84\xbf\x74\x74\x58\xd5\xc8\xe0\x45\xd5\xa8\x82\x74\xee\x29\x2b\x24\x2b\x34\x68\x13\x72\x1e\x34\xed\x35\x68\xaf\x86\x03\x09\x70\xcd\x9d\x70\x0c\xfe\xae\x2d\xe0\x13\xaf\x8d\xc4\x1c\x0e\xba\x81\x5a\x6c\xb6\x1e\x0c\x77\x94\x07\x13\xa9\x88\xe0\x78\x50\x3c\xc7\x58\x5d\x36\x05\x06\x19\xb8\x82\xad\xf7\x86\xfd\x93\xab\x52\x12\xc7\xbd\xf0\x5b\x40\x5e\x6c\xfb\x74\x86\xc5\x70\xfa\x12\xf6\xc2\x62\x09\x8d\x89\xa0\xce\x60\x21\x2a\x51\x80\xe1\x7e\xcb\x60\x71\x17\xf8\x09\x47\xf8\x6b\xbe\x96\x07\xe0\x50\x0b\xe7\xe3\x55\x80\x12\x9d\xd8\x28\xda\x2a\xd4\x4e\x3f\x62\x90\xf2\x3e\xda\x32\x5e\x9d\x40\x11\x4f\xcd\x8e\x66\x10\xc4\xa0\x24\x5b\x4e\xd5\x2d\xa4\x40\xe5\x4f\xd5\x9d\x18\x77\xbc\x85\xf2\x40\x77\x35\xc2\x61\xf9\x3d\x1b\x29\x23\xa3\x56\x82\x14\xae\x31\xa6\xd5\x91\xaf\x50\x1e\x6d\xc5\x29\xa1\xe6\x9d\x20\xb0\xf1\xb0\xf9\x4a\xd0\xb8\x58\xb3\xfa\xab\xb7\x0a\x3e\xbc\xc3\xfd\xeb\x3e\x9e\x42\xd7\x6b\xa1\x82\x4e\x75\x4f\x71\x62\x6c\xde\xd7\x0b\xdf\x58\x05\x22\x64\x32\x11\x2c\xb8\x94\x68\x63\x32\xf7\x64\x59\x1a\xc2\x39\x13\xb4\x4d\xdb\xd6\x72\xb5\x41\xb8\x10\x70\x7d\x03\x6c\x58\xff\x36\x9a\xd1\x75\x69\xd2\xb6\x17\x82\xbd\xe3\x35\x76\xdd\xb0\x1f\x00\xc6\x20\xd8\x30\x98\xb6\xed\x15\x8d\x76\x5d\xda\x9d\xde\xd5\x1f\x1f\x42\x80\x6d\x2b\x2a\x50\x08\xec\x63\x5f\x00\x1f\x0e\x06\xc3\xc1\x90\xdd\xd6\xc6\x1f\x32\x20\x3a\x94\xc7\xb0\x98\xc4\xb2\x84\x09\xc3\x45\xe1\x9f\xa0\xaf\x49\xec\x75\xfc\xcd\x29\x6f\x5e\x9a\x35\x6b\xdb\x7f\xe8\x80\x77\x21\xd8\xc7\x58\x71\xc7\x33\xba\x6e\x09\x8b\xf3\x45\xcf\x98\x74\x5d\x0e\x68\xad\xb6\x4b\x68\xd3\x84\x58\x0f\xd5\x3a\x8c\x53\x74\xc8\x66\x04\x23\x5a\x44\x63\x19\x22\x4d\x44\x15\x56\xbf\xb8\x01\x25\x24\xb4\x71\x30\xe9\x8d\x54\x42\x06\xb0\x38\x1a\xb5\x19\xe6\x86\xd3\xd8\xcf\x50\x5d\xe6\x84\x95\x26\x83\xbc\x28\x1d\xfe\xee\x0a\x86\x42\xfe\x2b\x22\x26\xbf\xaa\x60\x72\x26\x5f\x72\xae\x5d\x92\x74\x69\x32\xa3\xda\x4f\xd1\x3b\x13\x2e\x24\xf5\xf0\x4b\xa9\xfd\x96\x0a\xda\x34\xbf\x43\xc9\xbc\xf0\x18\xf2\x3b\xde\x9a\x69\xca\x5f\x78\x9c\xbb\x5a\xd1\x0a\x02\x9b\x8b\xd8\x41\x50\x7c\xba\x37\xae\xb8\x0f\x15\x70\x79\x7e\x05\x4f\xb4\x20\xec\x79\x33\x87\x6e\x63\xac\x60\x2d\x59\x37\xf6\x1d\x93\xe1\xe8\xc9\xc4\x2c\x42\xff\x4a\x11\xf5\x18\x73\x89\x78\x96\x16\x61\xdf\x6e\xf4\xd7\xb1\x67\xe9\x16\x18\xc5\x55\x33\xd6\xce\x99\x1b\xed\x1d\x67\x76\xbd\x61\x71\x38\xa8\x7f\xee\xd9\x7f\x2d\x37\x7f\x95\xf2\xf6\xa9\x40\xe3\x61\x6f\xb9\x71\xf1\x91\x1b\xd5\xab\x04\xca\x92\x5e\xf8\xbe\x3a\x1e\xcb\x65\xb0\x37\xbc\x0e\x33\x8d\x0d\x7b\x2b\xca\x52\xe2\x9e\xdb\xd8\x5f\xfe\xdb\x0d\x1d\x27\xf5\x5a\xc6\xc8\x03\x15\x79\x7a\xb8\x3c\x81\xd7\xe3\xea\xf0\x32\xe3\x0e\xed\x61\xb4\x92\x2e\x1a\xd5\xf0\xa1\x57\x21\xbc\xf7\x86\xde\x6d\x7a\xbb\xf2\xc9\xd3\x51\x70\x45\x7d\x0b\xbd\xf6\x58\xd2\xb6\xf5\x01\x14\x79\x10\xfb\x19\x7c\x2a\x64\x53\x62\x19\x9b\xcd\x35\x12\x05\x8a\xd9\x60\xc9\xce\xd4\x58\x1c\x39\xe5\x90\xdd\x7b\xee\x1b\x97\xe5\x90\x7d\x10\x6a\x93\x2d\xd3\xa1\x60\xbc\x9c\x54\x8c\x6f\xed\x87\x19\x55\xf2\x23\x1b\xc6\x98\xf3\x56\xa8\x4d\x48\x27\xa1\xfa\xe1\xeb\x1b\xa8\xb9\xf9\x14\xa7\x3e\x47\xf9\xdb\x8e\xec\xa7\x47\xe5\x47\x2f\x54\x92\x64\x93\x8c\xca\xae\xa1\xed\xf2\x7e\x6b\xb4\x3f\xe9\xd2\x34\x21\x37\xbe\x10\x95\x90\xbe\x01\x72\xa4\xd5\xc6\xaa\xf2\x25\x07\xfd\x48\xd3\x03\xb1\x4f\xf8\xf4\xf9\x15\xbc\xd0\x8f\x31\x15\x0d\x57\xa2\x58\x54\xb5\x67\xf7\xc6\x0a\xe5\xab\x45\x76\x3b\x40\x8c\x0e\x5e\xfe\xc5\x5d\x42\xa9\xd1\x81\xd2\x1e\xf0\x49\x38\xff\x0a\x1c\xe2\xd4\xf8\x31\x77\x1c\xdb\xe8\x8c\x48\x2d\x97\x7d\xcd\x2a\x51\xa2\xc7\xc5\xc0\x20\xcc\x1d\x03\x10\xaa\x38\xd2\x1f\xe5\xfb\x79\xa1\x44\x15\x20\x6e\x6e\xe0\x44\xb2\xfe\xa6\xcd\x56\x5e\xb8\x99\x30\x5f\xcc\x2e\x59\x0e\x57\xef\x44\xf2\x78\xed\xfe\xc5\xd7\x28\xb1\x3c\x66\x43\xfc\x38\xdb\xa0\x1f\x72\x77\xda\x4f\xc7\x14\xde\x6f\x51\x8d\xb3\x7a\x92\xae\x3d\x58\xcc\xba\x3c\xde\xb2\xfe\x22\x34\x71\x31\xc4\x2f\x3e\x1e\x3f\x1b\x45\x41\x6d\xa5\x15\x45\xec\xf7\x27\x1c\xb6\xa2\xd8\x86\xad\x0e\xd5\x1c\x85\xbe\x97\xea\x77\x0f\x9d\xa4\xb6\x7d\x27\x75\x1e\x55\x28\xb7\x31\x81\xf3\xf3\xca\x3c\x53\xac\xd3\x6f\xc5\xf5\x9b\x6b\xd3\x19\xa9\xbc\x8f\x33\x28\x6e\xb1\x40\xb1\x8b\x3d\x77\x08\xf1\xd9\xa7\x0c\x83\x7b\xc4\x11\x66\x82\x12\x26\x86\x4f\x81\xf1\xde\x13\x51\xca\xc8\x12\x3d\x17\x32\xb4\xed\xc3\x75\x0a\xdf\x8c\xfd\xe7\x06\x97\xc2\x1f\xd8\xf7\x4a\xc8\x49\xec\xd3\x4a\xf2\xcb\x8a\xfe\x59\x67\xfe\x38\x75\xe6\x64\x5b\x3e\xdf\x13\x7e\xab\xec\xfc\x3f\x00\x00\xff\xff\x21\x45\x0c\xb6\x3a\x12\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4666, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcHandlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\xcc\x39\xf0\x7e\x35\x07\x7c\x13\xa5\x53\x8d\x0e\x2d\xa0\xc4\x63\x2c\x33\x00\x00\xff\xff\x52\xf7\x77\x02\x3f\x00\x00\x00")

func svcHandlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcHandlersHandlersGotemplate,
		"svc/handlers/handlers.gotemplate",
	)
}

func svcHandlersHandlersGotemplate() (*asset, error) {
	bytes, err := svcHandlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/handlers/handlers.gotemplate", size: 63, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcHandlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\xcc\x39\xf0\x7e\x35\x07\x7c\x13\xa5\x53\x8d\x0e\x2d\xa0\xc4\x63\x2c\x33\x00\x00\xff\xff\x52\xf7\x77\x02\x3f\x00\x00\x00")

func svcHandlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcHandlersHooksGotemplate,
		"svc/handlers/hooks.gotemplate",
	)
}

func svcHandlersHooksGotemplate() (*asset, error) {
	bytes, err := svcHandlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/handlers/hooks.gotemplate", size: 63, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcServeGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4f\x6f\xdb\xb8\x13\x3d\x8b\x9f\x62\x2a\xf4\xf7\x83\x0c\xb8\x52\x81\xdd\xee\xc1\x5b\x1f\xda\x38\x6d\x03\x34\xa9\xe1\xb8\xdd\xe3\x82\x96\x46\x32\x51\x89\xd4\x0e\x69\xbb\x81\xe0\xef\xbe\x18\xea\x8f\x95\x36\x71\x9b\xcd\x21\x96\xc8\x99\x37\x8f\x33\xc3\x37\x4a\x12\xb8\x30\x19\x42\x81\x1a\x49\x3a\xcc\x60\x73\x07\x8e\x76\xd6\xc6\xb0\xf8\x04\x37\x9f\xd6\x70\xb9\xb8\x5a\xc7\x22\x49\x60\x85\xb4\xd3\x5a\xe9\xa2\x35\x80\x83\x2a\x4b\x30\x7b\xa4\x03\x29\x87\xe0\xb6\xca\x42\xae\x4a\xf4\xc6\x5f\x90\xac\x32\x7a\x06\x4d\x13\x77\xcf\xc7\xe3\x68\x03\x16\xd2\xe1\x78\x97\xdf\x8f\x47\x21\x6a\x99\x7e\x95\x05\x82\xdd\xa7\x42\xa8\xaa\x36\xe4\x20\x12\xd0\xfd\x85\x79\x29\x8b\xf0\xf4\x6a\xec\xe8\x25\xaf\x5c\x28\x82\xb0\x34\x05\xff\x68\x74\xdd\x4f\xb2\x75\xae\x1e\x3f\x27\x75\x4d\x26\x0f\x85\x08\x92\x04\x7e\xcb\x60\x29\xc9\xdd\x89\x20\x2c\x8c\x29\x4a\x8c\x0b\x53\x4a\x5d\xc4\x86\x8a\xa4\xa0\x3a\xed\xec\xd6\x7c\xbe\x5b\xa4\xbd\x4a\x51\x04\xf5\x06\xc2\xa6\x89\x97\x6f\xaf\x3c\xc5\xa5\x74\x5b\x78\x71\x3c\x72\x94\xa6\x89\xef\x2f\x42\x62\xf7\x69\xb2\x95\x3a\x2b\x91\x6c\x28\x26\x42\xec\x25\xc1\x02\x73\xb9\x2b\xdd\x85\xd1\xb9\x2a\xa0\xfd\x11\x22\xdf\xe9\x14\x94\x56\x2e\x9a\x40\x23\x02\x3e\x6f\x7c\xeb\x48\xe9\xe2\x8b\xa4\xe8\xff\xf7\x9c\xe2\x05\x6e\x76\xc5\x9b\x2c\xa3\x29\x84\x19\x3f\xc7\x32\xcb\x28\x9c\x42\x38\x7b\xf5\xf2\x8f\x97\xfc\xe0\x4d\x40\xea\x0c\x2a\x74\xa4\x52\x0b\xa5\xb2\x0e\x35\xb0\x25\x5a\x1b\x4e\x7e\x16\xe4\xc3\x7a\xbd\xec\x62\x70\xf2\xc6\x21\x5e\xf9\x10\x6c\xf0\x64\xd4\xf7\xab\xe5\x45\x87\xca\x49\x1e\xa3\xfe\xee\x51\x8b\xd5\xf2\x02\x22\xc6\x9e\xfc\x08\xee\x2b\xf2\xd9\x22\xa0\xde\x2b\x32\xba\x42\xed\x60\x2f\x49\xc9\x4d\x89\x76\x0a\x2a\x07\x8b\x2e\x86\x77\xa5\x2c\x2c\x6c\xe5\x1e\xa1\x26\x65\x48\xb9\x3b\xdf\xb2\x70\xa9\xf7\x6c\x6f\x63\x11\xa8\xdc\x03\xc3\x6c\x0e\xc6\xc6\xef\xd1\xa1\xde\x47\xe1\xe2\xf2\xed\xe7\xf7\x7f\xbf\x59\x2c\x56\xe1\xe4\xcf\xd6\xe0\xd9\x1c\xc2\x90\x8b\x12\x3c\x52\x05\x98\x7b\x43\x11\x1c\x3d\xaa\xef\xdd\xfb\xa8\xcb\x4f\xab\x35\xe3\xf9\xad\xc7\xf0\xfa\x84\xc3\x1c\xf2\xca\xc5\xb7\x35\x29\xed\xf2\x28\x9c\xfd\xcf\x86\x53\xef\x3a\xe9\x43\x3c\x40\x9c\xbd\x7f\x8d\xf7\x28\xce\x98\xf6\x03\x98\x5c\xac\x5f\xc3\xec\xcb\x3a\xc2\x3c\x0a\xe1\x65\xc6\xb7\x79\x6a\xb4\x93\x4a\x5b\x70\x5b\x04\xc2\x7f\x76\x8a\x30\x83\x5c\x61\x99\x59\xc8\x0d\x41\xaf\x31\x12\x2c\xd2\x1e\x49\xb8\xbb\x1a\x7b\x6f\xeb\x68\x97\x3a\x0e\x3b\x70\xb7\xbe\xc1\x44\x70\x2a\x42\xbf\x32\x50\xe9\x16\x8e\xdd\xe5\xba\xc1\xc3\xa5\xce\x6a\xa3\xb4\xb3\x91\x6d\x2f\x34\xd4\x9b\xb8\x69\xe2\xee\x7a\xc7\x37\xb2\xc2\xe3\xf1\xd6\x13\x98\xc0\x60\xcd\x81\x93\x04\xde\xee\xac\xd2\x68\x2d\x64\xa6\x92\x4a\xc7\x6d\x37\xfe\x45\xb2\xee\xf5\x01\x0e\xca\x6d\xa1\x52\x59\x56\xe2\x41\x12\xda\x18\x6e\x11\xa1\x97\x80\x64\xbc\x53\x18\x76\xef\x79\xcc\x07\xa3\x98\x01\x3b\xbc\x9e\x66\xd7\xf8\x3d\xa1\x81\x40\xc0\x7a\x12\x89\xa0\x69\x48\xea\x02\xe1\xb9\xe2\x02\x0e\xc7\xb9\x46\xb7\x35\x99\x65\x2d\x12\x41\xd0\x34\x6b\xf3\xd1\x1c\x90\xe0\xb9\xea\x4e\x3a\x00\xce\xe1\x5a\x7e\xc5\xa6\xf9\x61\xe7\xc4\x20\x68\x1a\xd4\x19\x23\x31\x1b\x1c\x72\x33\x9b\x9f\x12\xd5\xfc\x32\x95\x1f\x02\xcd\x58\xca\xcf\x50\x9c\x8e\x08\x1c\x47\x99\xb7\x58\x62\xca\x03\xec\x54\xad\x27\x17\xe1\x74\x98\xef\xca\x70\xea\x97\xc1\x84\x0f\x4f\xe8\x76\xa4\x61\x58\xeb\x5a\xdd\xf7\x0d\x58\x27\xc9\x59\x90\xa0\xf1\x00\x2c\x9c\x5d\x43\x4f\xc1\x2b\x5b\xff\xc2\xca\x2c\xc1\x8b\x77\xb7\xd6\xf2\x76\x5b\x64\xac\x5a\x5a\x8b\x19\x5f\x1b\xee\x7f\x36\x2e\x4d\x51\x20\xb5\xad\xec\x23\x45\x69\xde\x8f\x0f\x3f\x32\xfa\x56\x9a\x8d\x0e\x71\x83\x87\xbe\x95\x26\xdf\x15\xed\xa1\xeb\xd0\xf5\xd9\x35\xa6\x5b\xa9\x55\x2a\xcb\x53\xa7\x21\x51\xca\x6e\x95\xfc\x8a\x11\x6f\x03\x12\x19\xea\x3c\xae\xb4\x43\xa2\x5d\xed\xfa\xd0\xb1\x08\x0a\x73\xe2\x31\xec\x7f\x68\x57\x22\x86\xeb\x7c\xdb\x49\xd5\x4a\x7d\xef\xc8\xa7\x6c\x07\x61\x50\x9a\x22\x5e\xb2\x12\x96\x3a\x0a\x1d\x49\x6d\x59\x09\xc3\x7e\xf2\xf1\x43\x37\x43\xd2\x7c\xa4\xc9\x0c\x1e\x54\x3e\x19\x3c\xbc\xba\x44\xe0\xf5\xee\x1b\x67\x22\xa8\xe2\x96\x49\x14\x26\x1e\xa6\xfd\x34\x48\xc2\x69\x6b\xde\xd1\x7c\xc7\x34\xfc\x4e\x7c\xa5\x33\xfc\x36\x39\xe3\x9a\x56\x59\xa9\x34\x3e\x8e\x70\xd1\x1a\x9c\xc3\xe0\x7f\xaa\x3c\x83\xb1\x6c\x0d\xce\x61\xd8\xbb\x6a\x63\xca\xc7\x21\x6e\xfd\xfe\x39\x04\x47\x32\x3d\xc3\x61\xcd\xdb\x13\x9f\x5f\xdf\x14\xaf\x5f\xb4\x96\x1f\x7d\x05\xdf\xe8\x6c\xe8\xce\xf1\x77\x4a\xc5\xb3\x2b\xea\x4a\xee\xbf\x1c\x86\x5a\x3e\xa1\xe4\xec\xf8\x5d\xc5\xfb\x89\xc0\x07\xda\x72\xbd\x59\xc9\x78\x71\x68\xb5\xd3\xd5\xfd\x39\xe3\xd3\x47\xcf\x76\x4c\xd8\x5f\xdd\xff\x42\x98\x1d\xc3\xe9\x98\x6f\x3f\x9e\x98\x4d\xa9\xa7\x7c\x8d\x98\xb5\x46\xd7\xf1\x89\x42\x97\xd6\x0f\x18\xab\xdc\xdb\x3e\x9b\x83\x56\xa5\x0f\x3b\x9c\x06\x89\xf8\xb5\xd5\x25\x11\x78\x81\x0c\x2c\xed\xfb\x74\x30\x4c\x3b\xd5\xee\x67\xc3\x0b\x81\xff\x0c\xeb\xef\x07\xf9\xdb\x51\x6f\xe2\x15\x16\xcc\x86\x1e\x99\x8e\x91\x9d\x82\xa5\xfd\xbd\x2e\xb0\x71\x9b\xc7\x52\x8f\x53\xb7\xda\xe9\x67\xe2\x7e\x86\xf0\x9b\xe2\xe4\xbc\x7e\xd1\xaa\xc0\x51\x88\x7f\x03\x00\x00\xff\xff\xf2\xff\x10\xa4\x90\x0c\x00\x00")

func svcServeGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServeGotemplate,
		"svc/serve.gotemplate",
	)
}

func svcServeGotemplate() (*asset, error) {
	bytes, err := svcServeGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/serve.gotemplate", size: 3216, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5b\x6f\xdb\x36\x14\x7e\x16\x7f\xc5\x99\x51\x0c\x76\xe1\x50\x7b\x0e\x90\x97\x26\x59\x5b\x6c\x6d\x83\x2c\xe8\x1e\x8a\xa2\xa0\xa5\x63\x89\xb0\x44\x2a\x24\xe5\xc4\x23\xf4\xdf\x87\x43\xdd\x7c\x4b\x6c\xec\x61\xc3\x0c\x04\xb1\xc5\x8f\xe7\xf2\x7d\xe7\x1c\x52\x71\x0c\xd7\x3a\x45\xc8\x50\xa1\x11\x0e\x53\x58\x6c\xc0\x99\xda\x5a\x0e\x37\x5f\xe0\xf3\x97\x07\xb8\xbd\xf9\xf8\xc0\x59\x1c\xc3\x3d\x9a\x5a\x29\xa9\xb2\x16\x00\x4f\xb2\x28\x40\xaf\xd1\x3c\x19\xe9\x10\x5c\x2e\x2d\x2c\x65\x81\x01\xfc\x15\x8d\x95\x5a\x5d\x82\xf7\xbc\xfb\xde\x34\x5b\x0b\x70\x23\x1c\x6e\xaf\xd2\xef\xa6\x61\xac\x12\xc9\x4a\x64\x08\x76\x9d\x30\xc2\x3f\xf4\x66\xa1\x32\x7a\x2d\x53\xb4\x60\xd1\xac\xd1\x5c\x58\x99\x22\x2c\xa4\x4a\xa5\xca\x2c\x2c\xb5\x01\x97\x23\x64\xf7\x77\xd7\xe0\x8c\x50\xb6\xd2\xc6\x85\x58\x3e\x3a\xa8\x9d\x2c\xe4\x5f\x68\x03\x64\x58\x8d\x33\x53\x25\xfc\x8f\x60\x8e\x33\x26\x4b\x7a\x08\x53\x16\x4d\x14\xba\x38\x77\xae\x9a\xb0\x68\x92\x68\xe5\xf0\xd9\x4d\x18\x8b\x26\x99\xd6\x59\x81\x3c\xd3\x85\x50\x19\xd7\x26\x0b\x26\xe2\x12\x9d\x48\x85\x13\x84\xa1\x07\x83\x07\x98\x64\xd2\xe5\xf5\x82\x27\xba\x8c\x33\x7d\xb1\x92\x2e\xa6\xbf\xdd\x10\xc8\xcb\x0e\x2e\xd3\x71\x65\xb4\xd3\x8b\x7a\x19\xbb\x4d\x85\x96\x0c\xf7\x64\x50\xbc\x32\x41\x16\x55\x0b\x98\x78\xcf\xef\xde\x7d\x0c\x81\xdf\x09\x97\xc3\x45\xd3\x4c\xd8\x2c\x30\xf7\x49\xac\xf0\xfd\xfd\xdd\x75\x9b\x1f\x94\x62\x85\x16\x04\x58\x74\xa0\x97\x80\x2a\xad\xb4\x54\xce\x82\x58\x0b\x59\x88\x45\x81\x20\x68\x3d\x10\xe8\x3d\xef\xdc\xf0\xcf\xa2\xc4\xa6\xe9\x49\x5a\xd6\x2a\xd9\xb3\x3c\x1d\x4d\xdd\xf6\xdf\xe6\xa0\x2b\x27\xb5\xb2\xc0\x39\xdf\x61\xa4\xa3\xfb\x4b\x58\x9e\x41\xb5\xe0\x2f\xf8\x02\xcf\x22\xbb\x85\xb5\x70\x79\x05\xdf\xbe\xbf\x6c\xcc\xb3\x28\x3a\xb6\xfa\x0e\x97\xda\xe0\xb4\xd7\xe8\x41\x5f\xb7\x82\xce\xe6\x2c\x6a\xf6\x7d\x5c\x81\xa8\x2a\x54\xe9\x74\xe7\xf1\x90\x0e\xe7\x7c\xc6\x22\x83\xae\x36\x0a\x7e\x26\x6f\xad\x0f\x1f\xe4\xf1\x1e\x1e\xf4\xef\xfa\x09\x0d\xec\xa4\x04\x4d\xc3\x22\xef\x8d\x50\x19\xc2\x1b\x49\x89\x0c\xeb\x9f\xd0\xe5\x3a\xb5\x84\x88\xbc\xef\xb7\xbf\x91\x1d\x17\x97\xb0\x9b\xd2\x67\x7c\xea\x58\x67\x51\x14\x0d\xcc\x73\xef\x87\x2d\xbd\x08\x73\x42\xdc\x60\xa2\xd3\x20\xd6\x16\xe2\x1e\x1f\x6b\xb4\x2d\xe0\x56\x1d\x05\xd8\x4a\x2b\x8b\x01\xb1\xc3\x04\xe7\x9c\x1e\x12\x77\xde\x5f\x50\x15\x51\xe4\x0d\x6b\x42\xc9\x8d\x84\x80\x2c\xab\x02\x4b\xa4\xaa\xa0\x9e\xf3\xfe\xbd\x0e\x54\x1c\xd7\x5a\x2a\x87\x66\x29\x12\x64\x54\xee\xdb\x76\xac\x33\x75\xe2\xc0\xb3\xd3\xfc\x1d\xa1\x0f\x60\x8f\xbf\x0f\x42\xa5\x05\x1a\x36\x06\xdf\x46\xde\x99\x09\x63\x64\xcb\xbb\xd3\x63\x22\xe7\xe7\x70\x32\x54\x00\x00\xef\xe5\x12\x14\x02\xef\xc9\x7e\xd8\x54\x5d\xb9\x4c\x6e\xcb\xca\x6d\x26\xd0\x21\x43\xcf\x4d\x2d\xbc\x1d\x03\x9b\x8d\xc1\x0c\xb9\x4e\x13\xf7\x0c\xdd\xb0\xe2\x5d\x8d\xcf\xc1\xe0\x23\xbc\x0d\x5d\x36\xe2\x3b\xfd\x07\x87\x4d\x33\x83\xe9\x21\x68\x2f\xac\xa6\x99\x03\x1a\xa3\xc9\x79\x88\x8b\x3e\x3f\xc8\x43\x15\x16\x28\x57\x2a\xc4\x03\x11\xda\x3e\xa4\x12\xa3\x10\x43\x48\xb3\xc1\x80\x5c\x86\xbd\x3f\x5d\x81\x92\xc5\x96\x61\xfa\x74\x7d\xa6\x64\x11\x1c\x0c\x6b\x0d\xdb\x43\x18\xac\xf8\x39\x09\xcc\xe6\x64\x8c\x8d\x36\xbc\xc7\xc2\xe2\xbf\xcb\x73\x18\xe8\xff\x73\xaa\xcf\xca\xe1\x18\xdb\xa1\xe5\xfa\xff\xd4\x78\x5d\xf3\xb4\x73\xea\x74\xe7\xc4\x31\xbc\x36\xd2\x40\xd2\x11\xb6\x77\xc0\xb7\x1b\x3a\xc4\xaf\x24\xb2\xcb\x85\x23\x09\xd7\x68\xe8\x00\x0c\xa3\xab\x3d\xf6\x0e\x27\x88\xe9\x2c\x3b\x0d\x02\x6a\x8b\xe6\x22\xd5\xa5\x90\xea\x35\x30\x87\x3b\x23\x4b\x61\x64\xb1\xa1\x2d\xcb\xba\x00\xa9\xc2\xd9\xbb\x75\x8a\xbe\x96\xc7\xf4\xc7\x61\x85\x51\x2e\xf7\xf8\x38\xce\x19\x4f\xe5\xb4\xf5\x6b\xab\x66\x22\x2a\xc7\xcb\xab\x7e\xcf\xb1\xe6\x38\x28\xcd\xe1\x5c\x33\xf8\xd8\x2a\x77\x54\xa9\xf6\xc0\x38\x4b\xa9\x57\xcf\x96\xa3\x52\xb5\x3b\x7a\xc8\x4b\x5a\x9d\x56\xa1\x73\x11\x34\x7b\x45\xd9\xaa\xd8\x9c\x92\xea\x1f\x8c\xea\x57\xd3\x3e\xa6\xec\x10\xef\x39\xd2\x8e\xfd\x68\x2b\xa2\xbe\xdf\x7c\xde\x00\x3c\x6c\x67\x5b\x9d\x1e\x8a\xff\x59\x46\xe7\xcd\x99\x53\x49\x45\xc7\x06\xcf\x07\x2c\x2a\x34\x96\xb5\xcd\x78\x70\x3b\x3c\x3e\xe5\xcb\x74\x40\xf2\x4f\x37\xb3\x7d\x00\x75\x1e\xdd\x20\x56\x73\x58\x87\x4c\x42\x8b\x94\x29\x3d\x8f\xe4\x12\xd6\xe3\xf0\x8d\xa2\xf6\x42\x8f\xb0\xc2\x4d\xe8\x85\x34\xa5\xd7\x2f\xed\x72\x2a\xc0\xde\x0b\x5d\x48\x4a\xe1\x60\xba\x9a\xc1\x53\x2e\x93\x3c\x40\x8b\x02\x0a\x2a\xe6\xce\x8a\x50\x69\xb8\x64\xd1\x1b\x0b\xbf\x16\x4a\x2b\x99\x88\xe2\x03\x8a\x14\xcd\x6f\xb8\xa1\xeb\xbe\xeb\x1c\x59\xdd\x36\x94\x74\x90\x08\x05\x0b\xec\x4d\x24\x09\x5a\x8b\x29\xf9\x46\xe9\x72\x34\x9d\x67\x5a\x27\x2a\xae\x86\x5c\xff\x94\x2e\xff\x2a\x8a\x1a\xdb\x23\x86\x72\xfd\xf6\xcb\xf7\xd9\x49\xe0\x0b\xd1\x4d\x57\xb3\xd1\x42\xb8\x4b\x0e\x83\x28\x71\xcf\xac\x61\x7f\x07\x00\x00\xff\xff\xc4\xec\x0c\xfa\xa4\x0e\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3748, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 106, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/grpc/client.gotemplate": clientGrpcClientGotemplate,
	"client/http/client.gotemplate": clientHttpClientGotemplate,
	"cmd/server/main.gotemplate": cmdServerMainGotemplate,
	"svc/endpoints.gotemplate": svcEndpointsGotemplate,
	"svc/handlers/handlers.gotemplate": svcHandlersHandlersGotemplate,
	"svc/handlers/hooks.gotemplate": svcHandlersHooksGotemplate,
	"svc/serve.gotemplate": svcServeGotemplate,
	"svc/transport_grpc.gotemplate": svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate": svcTransport_httpGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"grpc": &bintree{nil, map[string]*bintree{
			"client.gotemplate": &bintree{clientGrpcClientGotemplate, map[string]*bintree{}},
		}},
		"http": &bintree{nil, map[string]*bintree{
			"client.gotemplate": &bintree{clientHttpClientGotemplate, map[string]*bintree{}},
		}},
	}},
	"cmd": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"main.gotemplate": &bintree{cmdServerMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"svc": &bintree{nil, map[string]*bintree{
		"endpoints.gotemplate": &bintree{svcEndpointsGotemplate, map[string]*bintree{}},
		"handlers": &bintree{nil, map[string]*bintree{
			"handlers.gotemplate": &bintree{svcHandlersHandlersGotemplate, map[string]*bintree{}},
			"hooks.gotemplate": &bintree{svcHandlersHooksGotemplate, map[string]*bintree{}},
		}},
		"serve.gotemplate": &bintree{svcServeGotemplate, map[string]*bintree{}},
		"transport_grpc.gotemplate": &bintree{svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": &bintree{svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

